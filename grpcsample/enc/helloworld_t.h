/*
 *  This file is auto generated by oeedger8r. DO NOT EDIT.
 */
#ifndef EDGER8R_HELLOWORLD_T_H
#define EDGER8R_HELLOWORLD_T_H

#include <openenclave/enclave.h>
#include "helloworld_args.h"

OE_EXTERNC_BEGIN

/* List of ecalls */

int ecall_run(void);
void enc_enclave_thread(uint64_t enc_key);

/* List of ocalls */

oe_result_t oe_host_ocall_socket(
        oe_socket_result_t* _retval,
        int a,
        int b,
        int c);
oe_result_t oe_host_ocall_socketpair(
        oe_socketpair_result_t* _retval,
        int a,
        int b,
        int c,
        int d[2]);
oe_result_t oe_host_ocall_bind(
        oe_bind_result_t* _retval,
        int a,
        const struct sockaddr* b,
        socklen_t c);
oe_result_t oe_host_ocall_getsockname(
        oe_getsockname_result_t* _retval,
        int a,
        struct sockaddr* b,
        socklen_t c_,
        socklen_t* c);
oe_result_t oe_host_ocall_connect(
        oe_connect_result_t* _retval,
        int a,
        const struct sockaddr* b,
        socklen_t c);
oe_result_t oe_host_ocall_getpeername(
        oe_getpeername_result_t* _retval,
        int a,
        struct sockaddr* b,
        socklen_t c_,
        socklen_t* c);
oe_result_t oe_host_ocall_send(
        oe_send_result_t* _retval,
        int a,
        const void* b,
        int c,
        int d);
oe_result_t oe_host_ocall_recv(
        oe_recv_result_t* _retval,
        int a,
        void* b,
        int c,
        int d);
oe_result_t oe_host_ocall_sendto(
        oe_sendto_result_t* _retval,
        int a,
        const void* b,
        int c,
        int d,
        const struct sockaddr* e,
        socklen_t f);
oe_result_t oe_host_ocall_recvfrom(
        oe_recvfrom_result_t* _retval,
        int a,
        void* b,
        int c,
        int d,
        struct sockaddr* e,
        socklen_t f_,
        socklen_t* f);
oe_result_t oe_host_ocall_sendmsg(
        oe_sendmsg_result_t* _retval,
        int a,
        struct msghdr* b,
        int c,
        void* msg_name,
        int msg_namelen,
        struct iovec* msg_iov,
        int msg_iovlen,
        void* msg_control,
        int msg_controllen,
        int msg_flags,
        void* iov_buffer,
        int total_iovlen);
oe_result_t oe_host_ocall_recvmsg(
        oe_recvmsg_result_t* _retval,
        int a,
        struct msghdr* b,
        int c,
        void* msg_name,
        int msg_namelen,
        int* actual_msg_namelen,
        struct iovec* msg_iov,
        int msg_iovlen,
        int* actual_msg_iovlen,
        void* msg_control,
        int msg_controllen,
        int* actual_msg_controllen,
        int* msg_flags,
        void* individual_iov_buffer,
        int individual_iov_len,
        int* actual_individual_iov_len);
oe_result_t oe_host_ocall_getsockopt(
        oe_getsockopt_result_t* _retval,
        int a,
        int b,
        int c,
        void* d,
        socklen_t e_,
        socklen_t* e);
oe_result_t oe_host_ocall_setsockopt(
        oe_setsockopt_result_t* _retval,
        int a,
        int b,
        int c,
        const void* d,
        socklen_t e);
oe_result_t oe_host_ocall_listen(
        oe_listen_result_t* _retval,
        int a,
        int b);
oe_result_t oe_host_ocall_accept(
        oe_accept_result_t* _retval,
        int a,
        struct sockaddr* b,
        socklen_t c_,
        socklen_t* c);
oe_result_t oe_host_ocall_shutdown(
        oe_shutdown_result_t* _retval,
        int a,
        int b);
oe_result_t oe_host_ocall_sockatmark(
        oe_sockatmark_result_t* _retval,
        int a);
oe_result_t oe_host_ocall_isfdtype(
        oe_isfdtype_result_t* _retval,
        int a,
        int b);
oe_result_t host_exit(
        int arg);
oe_result_t host_create_thread(
        uint64_t enc_key,
        oe_enclave_t* enc);
oe_result_t host_join_thread(
        int* _retval,
        uint64_t enc_key);
oe_result_t host_detach_thread(
        int* _retval,
        uint64_t enc_key);
oe_result_t host_cond_timedwait(
        int* _retval,
        pthread_cond_t* cond,
        pthread_mutex_t* mutex,
        const struct timespec* abstime);
oe_result_t oe_host_ocall_pthread_cond_timedwait(
        oe_pthread_cond_timedwait_result_t* _retval,
        pthread_cond_t* a,
        pthread_mutex_t* b,
        const struct timespec* c);
oe_result_t oe_host_ocall_pthread_attr_init(
        oe_pthread_attr_init_result_t* _retval,
        pthread_attr_t* a);
oe_result_t oe_host_ocall_pthread_attr_destroy(
        oe_pthread_attr_destroy_result_t* _retval,
        pthread_attr_t* a);
oe_result_t oe_host_ocall_pthread_attr_setdetachstate(
        oe_pthread_attr_setdetachstate_result_t* _retval,
        pthread_attr_t* a,
        int b);
oe_result_t oe_host_ocall_pthread_condattr_init(
        oe_pthread_condattr_init_result_t* _retval,
        pthread_condattr_t* a);
oe_result_t oe_host_ocall_pthread_condattr_destroy(
        oe_pthread_condattr_destroy_result_t* _retval,
        pthread_condattr_t* a);
oe_result_t oe_host_ocall_pthread_condattr_setclock(
        oe_pthread_condattr_setclock_result_t* _retval,
        pthread_condattr_t* a,
        clockid_t b);
oe_result_t oe_host_ocall_pthread_condattr_setpshared(
        oe_pthread_condattr_setpshared_result_t* _retval,
        pthread_condattr_t* a,
        int b);
oe_result_t oe_host_ocall_pthread_condattr_getclock(
        oe_pthread_condattr_getclock_result_t* _retval,
        const pthread_condattr_t* a,
        clockid_t* b);
oe_result_t oe_host_ocall_pthread_condattr_getpshared(
        oe_pthread_condattr_getpshared_result_t* _retval,
        const pthread_condattr_t* a,
        int* b);
oe_result_t oe_host_ocall_eventfd(
        oe_eventfd_result_t* _retval,
        unsigned int a,
        int b);
oe_result_t oe_host_ocall_eventfd_read(
        oe_eventfd_read_result_t* _retval,
        int a,
        eventfd_t* b);
oe_result_t oe_host_ocall_eventfd_write(
        oe_eventfd_write_result_t* _retval,
        int a,
        eventfd_t b);
oe_result_t oe_host_ocall_htonl(
        oe_htonl_result_t* _retval,
        uint32_t a);
oe_result_t oe_host_ocall_htons(
        oe_htons_result_t* _retval,
        uint16_t a);
oe_result_t oe_host_ocall_ntohl(
        oe_ntohl_result_t* _retval,
        uint32_t a);
oe_result_t oe_host_ocall_ntohs(
        oe_ntohs_result_t* _retval,
        uint16_t a);
oe_result_t oe_host_ocall_inet_addr(
        oe_inet_addr_result_t* _retval,
        const char* a);
oe_result_t oe_host_ocall_inet_network(
        oe_inet_network_result_t* _retval,
        const char* a);
oe_result_t oe_host_ocall_inet_ntoa(
        oe_inet_ntoa_result_t* _retval,
        struct in_addr a);
oe_result_t oe_host_ocall_inet_pton(
        oe_inet_pton_result_t* _retval,
        int a,
        const char* b,
        void* c,
        int d);
oe_result_t oe_host_ocall_inet_ntop(
        oe_inet_ntop_result_t* _retval,
        int a,
        const void* b,
        int e,
        char* c,
        socklen_t d);
oe_result_t oe_host_ocall_inet_aton(
        oe_inet_aton_result_t* _retval,
        const char* a,
        struct in_addr* b);
oe_result_t oe_host_ocall_inet_makeaddr(
        oe_inet_makeaddr_result_t* _retval,
        in_addr_t a,
        in_addr_t b);
oe_result_t oe_host_ocall_inet_lnaof(
        oe_inet_lnaof_result_t* _retval,
        struct in_addr a);
oe_result_t oe_host_ocall_inet_netof(
        oe_inet_netof_result_t* _retval,
        struct in_addr a);
oe_result_t oe_host_ocall_getaddrinfo(
        oe_getaddrinfo_result_t* _retval,
        const char* a,
        const char* b,
        const struct addrinfo* c,
        struct addrinfo** d);
oe_result_t oe_host_ocall_freeaddrinfo(
        oe_freeaddrinfo_result_t* _retval,
        struct addrinfo* a);
oe_result_t oe_host_ocall_getnameinfo(
        oe_getnameinfo_result_t* _retval,
        const struct sockaddr* a,
        socklen_t b,
        char* c,
        socklen_t d,
        char* e,
        socklen_t f,
        int g);
oe_result_t oe_host_ocall_gai_strerror(
        oe_gai_strerror_result_t* _retval,
        int a);
oe_result_t oe_host_ocall_sethostent(
        oe_sethostent_result_t* _retval,
        int a);
oe_result_t oe_host_ocall_endhostent(
        oe_endhostent_result_t* _retval);
oe_result_t oe_host_ocall_gethostent(
        oe_gethostent_result_t* _retval);
oe_result_t oe_host_ocall_setnetent(
        oe_setnetent_result_t* _retval,
        int a);
oe_result_t oe_host_ocall_endnetent(
        oe_endnetent_result_t* _retval);
oe_result_t oe_host_ocall_getnetent(
        oe_getnetent_result_t* _retval);
oe_result_t oe_host_ocall_getnetbyaddr(
        oe_getnetbyaddr_result_t* _retval,
        uint32_t a,
        int b);
oe_result_t oe_host_ocall_getnetbyname(
        oe_getnetbyname_result_t* _retval,
        const char* a);
oe_result_t oe_host_ocall_setservent(
        oe_setservent_result_t* _retval,
        int a);
oe_result_t oe_host_ocall_endservent(
        oe_endservent_result_t* _retval);
oe_result_t oe_host_ocall_getservent(
        oe_getservent_result_t* _retval);
oe_result_t oe_host_ocall_getservbyname(
        oe_getservbyname_result_t* _retval,
        const char* a,
        const char* b);
oe_result_t oe_host_ocall_getservbyport(
        oe_getservbyport_result_t* _retval,
        int a,
        const char* b);
oe_result_t oe_host_ocall_setprotoent(
        oe_setprotoent_result_t* _retval,
        int a);
oe_result_t oe_host_ocall_endprotoent(
        oe_endprotoent_result_t* _retval);
oe_result_t oe_host_ocall_getprotoent(
        oe_getprotoent_result_t* _retval);
oe_result_t oe_host_ocall_getprotobyname(
        oe_getprotobyname_result_t* _retval,
        const char* a);
oe_result_t oe_host_ocall_getprotobynumber(
        oe_getprotobynumber_result_t* _retval,
        int a);
oe_result_t oe_host_ocall_gethostbyname(
        oe_gethostbyname_result_t* _retval,
        const char* a);
oe_result_t oe_host_ocall_gethostbyaddr(
        oe_gethostbyaddr_result_t* _retval,
        const void* a,
        socklen_t b,
        int c);
oe_result_t oe_host_ocall___h_errno_location(
        oe___h_errno_location_result_t* _retval);
oe_result_t oe_host_ocall_herror(
        oe_herror_result_t* _retval,
        const char* a);
oe_result_t oe_host_ocall_hstrerror(
        oe_hstrerror_result_t* _retval,
        int a);
oe_result_t oe_host_ocall_gethostbyname_r(
        oe_gethostbyname_r_result_t* _retval,
        const char* a,
        struct hostent* b,
        char* c,
        size_t d,
        struct hostent** e,
        int* f);
oe_result_t oe_host_ocall_gethostbyname2_r(
        oe_gethostbyname2_r_result_t* _retval,
        const char* a,
        int b,
        struct hostent* c,
        char* d,
        size_t e,
        struct hostent** f,
        int* g);
oe_result_t oe_host_ocall_gethostbyname2(
        oe_gethostbyname2_result_t* _retval,
        const char* a,
        int b);
oe_result_t oe_host_ocall_gethostbyaddr_r(
        oe_gethostbyaddr_r_result_t* _retval,
        const void* a,
        socklen_t b,
        int c,
        struct hostent* d,
        char* e,
        size_t f,
        struct hostent** g,
        int* h);
oe_result_t oe_host_ocall_getservbyport_r(
        oe_getservbyport_r_result_t* _retval,
        int a,
        const char* b,
        struct servent* c,
        char* d,
        size_t e,
        struct servent** f);
oe_result_t oe_host_ocall_getservbyname_r(
        oe_getservbyname_r_result_t* _retval,
        const char* a,
        const char* b,
        struct servent* c,
        char* d,
        size_t e,
        struct servent** f);
oe_result_t oe_host_ocall_epoll_create(
        oe_epoll_create_result_t* _retval,
        int a);
oe_result_t oe_host_ocall_epoll_create1(
        oe_epoll_create1_result_t* _retval,
        int a);
oe_result_t oe_host_ocall_epoll_ctl(
        oe_epoll_ctl_result_t* _retval,
        int a,
        int b,
        int c,
        struct epoll_event* d);
oe_result_t oe_host_ocall_epoll_wait(
        oe_epoll_wait_result_t* _retval,
        int a,
        struct epoll_event* b,
        int c,
        int d);
oe_result_t oe_host_ocall_epoll_pwait(
        oe_epoll_pwait_result_t* _retval,
        int a,
        struct epoll_event* b,
        int c,
        int d,
        const sigset_t* e);
oe_result_t oe_host_ocall_creat(
        oe_creat_result_t* _retval,
        const char* a,
        mode_t b);
oe_result_t oe_host_ocall_fcntl(
        oe_fcntl_result_t* _retval,
        int a,
        int b,
        int64_t c);
oe_result_t oe_host_ocall_open(
        oe_open_result_t* _retval,
        const char* a,
        int b);
oe_result_t oe_host_ocall_openat(
        oe_openat_result_t* _retval,
        int a,
        const char* b,
        int c);
oe_result_t oe_host_ocall_posix_fadvise(
        oe_posix_fadvise_result_t* _retval,
        int a,
        off_t b,
        off_t c,
        int d);
oe_result_t oe_host_ocall_posix_fallocate(
        oe_posix_fallocate_result_t* _retval,
        int a,
        off_t b,
        off_t c);
oe_result_t oe_host_ocall_lockf(
        oe_lockf_result_t* _retval,
        int a,
        int b,
        off_t c);

OE_EXTERNC_END

#endif // EDGER8R_HELLOWORLD_T_H
